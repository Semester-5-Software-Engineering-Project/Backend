name: Build, Release and Deploy

on:
  push:
    branches: [ "Development_2.0", "main", "master" ]
    tags: [ "v*" ]
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write   # âœ… allow release + upload assets
  packages: write  

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Upload JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: tutorverse-jar-${{ github.sha }}
        path: target/Tutorverse-0.0.1-SNAPSHOT.jar
        retention-days: 30

    - name: Get version
      id: version
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Auto-generated release from tag ${{ github.ref_name }}
          - Built from commit: ${{ github.sha }}
          
          ## Deployment
          Download the JAR file and run:
          ```bash
          java -jar tutorverse-backend-${{ github.ref_name }}.jar
          ```
        draft: false
        prerelease: false
        files: |
          target/Tutorverse-0.0.1-SNAPSHOT.jar

  build-and-push-docker:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR from release
      run: |
        mkdir -p target
        curl -L -o target/Tutorverse-0.0.1-SNAPSHOT.jar \
          "https://github.com/${{ github.repository }}/releases/download/${{ needs.build-and-release.outputs.version }}/Tutorverse-0.0.1-SNAPSHOT.jar"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/tutorverse:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Tag and push Docker image as latest (redundant safety)
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }}
        docker tag ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }} ${{ secrets.DOCKER_USERNAME }}/tutorverse:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/tutorverse:latest

  deploy-to-server:
    needs: [build-and-release, build-and-push-docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Server via SSH
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Navigate to backend directory
          cd backend/
          
          # Pull the latest Docker image
          sudo docker pull vithurshansiva/tutorverse:latest
          
          # Stop existing containers
          sudo docker compose down
          
          # Start containers with updated image
          sudo docker compose up -d
          
          echo "Deployment completed successfully!"
          echo "Application should be accessible at: http://${{ secrets.SERVER_HOST }}:8080"
        EOF
