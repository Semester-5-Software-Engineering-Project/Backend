name: Build, Release and Deploy

on:
  push:
    branches: [ "Development_2.0", "main" ]
    tags: [ "v*" ]
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write   # âœ… allow release + upload assets
  packages: write  

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Upload JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: tutorverse-jar-${{ github.sha }}
        path: target/Tutorverse-0.0.1-SNAPSHOT.jar
        retention-days: 30

    - name: Get version
      id: version
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Auto-generated release from tag ${{ github.ref_name }}
          - Built from commit: ${{ github.sha }}
          
          ## Deployment
          Download the JAR file and run:
          ```bash
          java -jar tutorverse-backend-${{ github.ref_name }}.jar
          ```
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/Tutorverse-0.0.1-SNAPSHOT.jar
        asset_name: tutorverse-backend-${{ github.ref_name }}.jar
        asset_content_type: application/java-archive

  build-and-push-docker:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR from release
      run: |
        curl -L -o target/Tutorverse-0.0.1-SNAPSHOT.jar \
          "https://github.com/${{ github.repository }}/releases/download/${{ needs.build-and-release.outputs.version }}/tutorverse-backend-${{ needs.build-and-release.outputs.version }}.jar"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/tutorverse:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # deploy-to-gce:
  #   needs: [build-and-release, build-and-push-docker]
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup Google Cloud CLI
  #     uses: google-github-actions/setup-gcloud@v1
  #     with:
  #       service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
  #       project_id: ${{ secrets.GCP_PROJECT_ID }}

  #   - name: Deploy to GCE
  #     run: |
  #       # SSH into GCE instance and deploy
  #       gcloud compute ssh ${{ secrets.GCE_INSTANCE_NAME }} \
  #         --zone=${{ secrets.GCE_ZONE }} \
  #         --command="
  #           # Navigate to application directory
  #           cd /home/${{ secrets.GCE_USERNAME }}/tutorverse-backend || exit 1
            
  #           # Pull the latest code (optional, for docker-compose files)
  #           git pull origin main || echo 'Git pull failed, continuing...'
            
  #           # Update the docker-compose.prod.yml with new version
  #           sed -i 's|image: .*/tutorverse:.*|image: ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }}|' docker-compose.prod.yml
            
  #           # Pull the latest Docker image
  #           docker pull ${{ secrets.DOCKER_USERNAME }}/tutorverse:${{ needs.build-and-release.outputs.version }}
            
  #           # Stop existing containers
  #           docker-compose -f docker-compose.prod.yml down
            
  #           # Start new containers with updated image
  #           docker-compose -f docker-compose.prod.yml up -d
            
  #           # Clean up old images (optional)
  #           docker image prune -f
            
  #           echo 'Deployment completed successfully!'
  #         "
