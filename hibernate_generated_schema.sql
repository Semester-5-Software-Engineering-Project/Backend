-- Complete DDL Schema generated by Hibernate for Tutorverse application
-- Generated on: 2025-10-09

-- Set PostgreSQL client messages level
SET client_min_messages = WARNING;

-- Drop existing constraints if they exist
ALTER TABLE IF EXISTS enrollment DROP CONSTRAINT IF EXISTS FKku7hb2qg5l2q9b99kx2sqc2k7;
ALTER TABLE IF EXISTS enrollment DROP CONSTRAINT IF EXISTS FKio7fsy3vhvfgv7c0gjk15nyk4;
ALTER TABLE IF EXISTS material DROP CONSTRAINT IF EXISTS FK7epcyukx805hbitlsp5httga4;
ALTER TABLE IF EXISTS modules DROP CONSTRAINT IF EXISTS FKjmiepf1usrw4u7pmdx9qv8fay;
ALTER TABLE IF EXISTS modules DROP CONSTRAINT IF EXISTS FK5j79ysm5ll8bb5gbrys3hb9e6;
ALTER TABLE IF EXISTS payments DROP CONSTRAINT IF EXISTS FK5r1n1of8jsigg0xxfvvq11odw;
ALTER TABLE IF EXISTS payments DROP CONSTRAINT IF EXISTS FKo0lgt74t3bsgmnfq54pcdew7y;
ALTER TABLE IF EXISTS rating DROP CONSTRAINT IF EXISTS FK1bfp8op46vayyf5yw015ipbm2;
ALTER TABLE IF EXISTS schedules DROP CONSTRAINT IF EXISTS FK3vh9t5samttx20l2i541uhw77;
ALTER TABLE IF EXISTS schedules DROP CONSTRAINT IF EXISTS FKt86ylnyj3tl8vmioy9a2hut6y;
ALTER TABLE IF EXISTS student DROP CONSTRAINT IF EXISTS FKbjuuwdqnx5y9nmn38223wokev;
ALTER TABLE IF EXISTS tutor DROP CONSTRAINT IF EXISTS FKd1fg4ojpgb32brt8wat35o7ji;
ALTER TABLE IF EXISTS users DROP CONSTRAINT IF EXISTS FKp56c1712k691lhsyewcssf40f;

-- Drop existing tables if they exist
DROP TABLE IF EXISTS domain CASCADE;
DROP TABLE IF EXISTS enrollment CASCADE;
DROP TABLE IF EXISTS material CASCADE;
DROP TABLE IF EXISTS modules CASCADE;
DROP TABLE IF EXISTS notification_tracking CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS rating CASCADE;
DROP TABLE IF EXISTS recurrent CASCADE;
DROP TABLE IF EXISTS roles CASCADE;
DROP TABLE IF EXISTS schedules CASCADE;
DROP TABLE IF EXISTS student CASCADE;
DROP TABLE IF EXISTS tutor CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Create tables

-- Domain table
CREATE TABLE domain (
    domain_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    PRIMARY KEY (domain_id)
);

-- Enrollment table
CREATE TABLE enrollment (
    is_paid BOOLEAN NOT NULL,
    enrolment_id UUID NOT NULL,
    module_id UUID NOT NULL,
    student_id UUID NOT NULL,
    PRIMARY KEY (enrolment_id),
    UNIQUE (student_id, module_id)
);

-- Material table
CREATE TABLE material (
    material_id UUID NOT NULL,
    module_id UUID,
    description VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    url VARCHAR(255) NOT NULL,
    PRIMARY KEY (material_id)
);

-- Modules table
CREATE TABLE modules (
    average_ratings NUMERIC(3,1),
    domain INTEGER,
    duration NUMERIC(21,0),
    fee NUMERIC(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    module_id UUID NOT NULL,
    tutor_id UUID NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Draft','Active','Archived')),
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (module_id)
);

-- Notification tracking table
CREATE TABLE notification_tracking (
    scheduled_date DATE NOT NULL,
    scheduled_time TIME(6) NOT NULL,
    created_at TIMESTAMP(6) WITH TIME ZONE NOT NULL,
    notification_fired_at TIMESTAMP(6) WITH TIME ZONE NOT NULL,
    id UUID NOT NULL,
    schedule_id UUID NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (schedule_id, scheduled_date, scheduled_time)
);

-- Payments table
CREATE TABLE payments (
    amount FLOAT8 NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    currency VARCHAR(10) NOT NULL,
    module_id UUID NOT NULL,
    payment_id UUID NOT NULL,
    student_id UUID NOT NULL,
    order_id VARCHAR(255) NOT NULL UNIQUE,
    payhere_payment_id VARCHAR(255),
    payhere_signature VARCHAR(255),
    status VARCHAR(255) NOT NULL,
    PRIMARY KEY (payment_id)
);

-- Rating table
CREATE TABLE rating (
    rating NUMERIC(2,1),
    created_at TIMESTAMP(6) WITH TIME ZONE NOT NULL,
    enrolment_id UUID NOT NULL,
    module_id UUID NOT NULL,
    feedback TEXT,
    student_name VARCHAR(255),
    PRIMARY KEY (enrolment_id)
);

-- Recurrent table
CREATE TABLE recurrent (
    recurrent_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    recurrent_type VARCHAR(50) NOT NULL,
    PRIMARY KEY (recurrent_id)
);

-- Roles table
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY (id)
);

-- Schedules table
CREATE TABLE schedules (
    date DATE NOT NULL,
    duration INTEGER NOT NULL,
    recurrent_id INTEGER,
    time TIME(6) NOT NULL,
    week_number INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    module_id UUID NOT NULL,
    schedule_id UUID NOT NULL,
    PRIMARY KEY (schedule_id)
);

-- Student table
CREATE TABLE student (
    birthday DATE,
    is_active BOOLEAN,
    last_accessed DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    student_id UUID NOT NULL,
    address VARCHAR(255) NOT NULL,
    bio TEXT,
    city VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    image_url VARCHAR(255),
    last_name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY (student_id)
);

-- Tutor table
CREATE TABLE tutor (
    dob DATE,
    last_accessed DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tutor_id UUID NOT NULL,
    address VARCHAR(255) NOT NULL,
    bio TEXT,
    city VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    first_name VARCHAR(255) NOT NULL,
    gender VARCHAR(255) NOT NULL CHECK (gender IN ('MALE','FEMALE','OTHER')),
    image TEXT,
    last_name VARCHAR(255) NOT NULL,
    phone_no VARCHAR(255) NOT NULL UNIQUE,
    portfolio TEXT,
    status VARCHAR(255) CHECK (status IN ('PENDING','APPROVED','BANNED')),
    PRIMARY KEY (tutor_id)
);

-- Users table
CREATE TABLE users (
    is_email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    role_id BIGINT NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    id UUID NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255),
    password VARCHAR(255),
    providerid VARCHAR(255) UNIQUE,
    PRIMARY KEY (id)
);

-- Add foreign key constraints

-- Enrollment foreign keys
ALTER TABLE enrollment 
    ADD CONSTRAINT FKku7hb2qg5l2q9b99kx2sqc2k7 
    FOREIGN KEY (module_id) 
    REFERENCES modules;

ALTER TABLE enrollment 
    ADD CONSTRAINT FKio7fsy3vhvfgv7c0gjk15nyk4 
    FOREIGN KEY (student_id) 
    REFERENCES student;

-- Material foreign keys
ALTER TABLE material 
    ADD CONSTRAINT FK7epcyukx805hbitlsp5httga4 
    FOREIGN KEY (module_id) 
    REFERENCES modules;

-- Modules foreign keys
ALTER TABLE modules 
    ADD CONSTRAINT FKjmiepf1usrw4u7pmdx9qv8fay 
    FOREIGN KEY (domain) 
    REFERENCES domain;

ALTER TABLE modules 
    ADD CONSTRAINT FK5j79ysm5ll8bb5gbrys3hb9e6 
    FOREIGN KEY (tutor_id) 
    REFERENCES tutor;

-- Payments foreign keys
ALTER TABLE payments 
    ADD CONSTRAINT FK5r1n1of8jsigg0xxfvvq11odw 
    FOREIGN KEY (module_id) 
    REFERENCES modules;

ALTER TABLE payments 
    ADD CONSTRAINT FKo0lgt74t3bsgmnfq54pcdew7y 
    FOREIGN KEY (student_id) 
    REFERENCES student;

-- Rating foreign keys
ALTER TABLE rating 
    ADD CONSTRAINT FK1bfp8op46vayyf5yw015ipbm2 
    FOREIGN KEY (enrolment_id) 
    REFERENCES enrollment;

-- Schedules foreign keys
ALTER TABLE schedules 
    ADD CONSTRAINT FK3vh9t5samttx20l2i541uhw77 
    FOREIGN KEY (module_id) 
    REFERENCES modules;

ALTER TABLE schedules 
    ADD CONSTRAINT FKt86ylnyj3tl8vmioy9a2hut6y 
    FOREIGN KEY (recurrent_id) 
    REFERENCES recurrent;

-- Student foreign keys
ALTER TABLE student 
    ADD CONSTRAINT FKbjuuwdqnx5y9nmn38223wokev 
    FOREIGN KEY (student_id) 
    REFERENCES users;

-- Tutor foreign keys
ALTER TABLE tutor 
    ADD CONSTRAINT FKd1fg4ojpgb32brt8wat35o7ji 
    FOREIGN KEY (tutor_id) 
    REFERENCES users;

-- Users foreign keys
ALTER TABLE users 
    ADD CONSTRAINT FKp56c1712k691lhsyewcssf40f 
    FOREIGN KEY (role_id) 
    REFERENCES roles;